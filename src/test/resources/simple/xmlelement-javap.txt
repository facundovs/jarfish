public class nanoxml.XMLElement extends java.lang.Object
  minor version: 3
  major version: 45
  Constant pool:
const #1 = class	#288;	//  java/util/Hashtable
const #2 = Method	#1.#289;	//  java/util/Hashtable."<init>":()V
const #3 = Method	#88.#290;	//  nanoxml/XMLElement."<init>":(Ljava/util/Hashtable;ZZZ)V
const #4 = Method	#150.#289;	//  java/lang/Object."<init>":()V
const #5 = Field	#88.#291;	//  nanoxml/XMLElement.ignoreWhitespace:Z
const #6 = Field	#88.#292;	//  nanoxml/XMLElement.ignoreCase:Z
const #7 = Field	#88.#293;	//  nanoxml/XMLElement.name:Ljava/lang/String;
const #8 = String	#294;	//  
const #9 = Field	#88.#295;	//  nanoxml/XMLElement.contents:Ljava/lang/String;
const #10 = Field	#88.#296;	//  nanoxml/XMLElement.attributes:Ljava/util/Hashtable;
const #11 = class	#297;	//  java/util/Vector
const #12 = Method	#11.#289;	//  java/util/Vector."<init>":()V
const #13 = Field	#88.#298;	//  nanoxml/XMLElement.children:Ljava/util/Vector;
const #14 = Field	#88.#299;	//  nanoxml/XMLElement.entities:Ljava/util/Hashtable;
const #15 = Field	#88.#300;	//  nanoxml/XMLElement.lineNr:I
const #16 = Method	#1.#301;	//  java/util/Hashtable.keys:()Ljava/util/Enumeration;
const #17 = InterfaceMethod	#302.#303;	//  java/util/Enumeration.nextElement:()Ljava/lang/Object;
const #18 = Method	#1.#304;	//  java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
const #19 = class	#305;	//  java/lang/String
const #20 = Method	#19.#306;	//  java/lang/String.toCharArray:()[C
const #21 = Method	#1.#307;	//  java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #22 = InterfaceMethod	#302.#308;	//  java/util/Enumeration.hasMoreElements:()Z
const #23 = String	#309;	//  amp
const #24 = String	#310;	//  quot
const #25 = String	#311;	//  apos
const #26 = String	#312;	//  lt
const #27 = String	#313;	//  gt
const #28 = Method	#11.#314;	//  java/util/Vector.addElement:(Ljava/lang/Object;)V
const #29 = Method	#19.#315;	//  java/lang/String.toUpperCase:()Ljava/lang/String;
const #30 = Method	#150.#316;	//  java/lang/Object.toString:()Ljava/lang/String;
const #31 = Method	#88.#317;	//  nanoxml/XMLElement.setAttribute:(Ljava/lang/String;Ljava/lang/Object;)V
const #32 = Method	#49.#318;	//  java/lang/Integer.toString:(I)Ljava/lang/String;
const #33 = Method	#88.#319;	//  nanoxml/XMLElement.setIntAttribute:(Ljava/lang/String;I)V
const #34 = Method	#57.#320;	//  java/lang/Double.toString:(D)Ljava/lang/String;
const #35 = Method	#88.#321;	//  nanoxml/XMLElement.setDoubleAttribute:(Ljava/lang/String;D)V
const #36 = Method	#11.#322;	//  java/util/Vector.size:()I
const #37 = Method	#88.#323;	//  nanoxml/XMLElement.enumerateAttributeNames:()Ljava/util/Enumeration;
const #38 = Method	#11.#324;	//  java/util/Vector.elements:()Ljava/util/Enumeration;
const #39 = Method	#11.#325;	//  java/util/Vector.clone:()Ljava/lang/Object;
const #40 = class	#326;	//  java/lang/Exception
const #41 = Method	#88.#327;	//  nanoxml/XMLElement.getContent:()Ljava/lang/String;
const #42 = Method	#88.#328;	//  nanoxml/XMLElement.getAttribute:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
const #43 = Method	#88.#329;	//  nanoxml/XMLElement.invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
const #44 = Method	#88.#330;	//  nanoxml/XMLElement.getStringAttribute:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
const #45 = Method	#88.#331;	//  nanoxml/XMLElement.getAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)Ljava/lang/Object;
const #46 = Method	#88.#332;	//  nanoxml/XMLElement.getIntAttribute:(Ljava/lang/String;I)I
const #47 = Method	#49.#333;	//  java/lang/Integer.parseInt:(Ljava/lang/String;)I
const #48 = class	#334;	//  java/lang/NumberFormatException
const #49 = class	#335;	//  java/lang/Integer
const #50 = class	#336;	//  java/lang/ClassCastException
const #51 = Method	#88.#337;	//  nanoxml/XMLElement.invalidValueSet:(Ljava/lang/String;)Lnanoxml/XMLParseException;
const #52 = Method	#49.#338;	//  java/lang/Integer.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;
const #53 = Method	#49.#339;	//  java/lang/Integer.intValue:()I
const #54 = Method	#88.#340;	//  nanoxml/XMLElement.getDoubleAttribute:(Ljava/lang/String;D)D
const #55 = Method	#57.#341;	//  java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;
const #56 = Method	#57.#342;	//  java/lang/Double.doubleValue:()D
const #57 = class	#343;	//  java/lang/Double
const #58 = Method	#150.#344;	//  java/lang/Object.equals:(Ljava/lang/Object;)Z
const #59 = Method	#88.#345;	//  nanoxml/XMLElement.getIntAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)I
const #60 = Method	#88.#346;	//  nanoxml/XMLElement.getStringAttribute:(Ljava/lang/String;)Ljava/lang/String;
const #61 = Method	#88.#347;	//  nanoxml/XMLElement.getBooleanAttribute:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z
const #62 = Method	#88.#348;	//  nanoxml/XMLElement.getStringAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)Ljava/lang/String;
const #63 = Method	#88.#349;	//  nanoxml/XMLElement.getDoubleAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)D
const #64 = Method	#88.#350;	//  nanoxml/XMLElement.getName:()Ljava/lang/String;
const #65 = Method	#88.#351;	//  nanoxml/XMLElement.parseFromReader:(Ljava/io/Reader;I)V
const #66 = Field	#88.#352;	//  nanoxml/XMLElement.charReadTooMuch:C
const #67 = Field	#88.#353;	//  nanoxml/XMLElement.reader:Ljava/io/Reader;
const #68 = Field	#88.#354;	//  nanoxml/XMLElement.parserLineNr:I
const #69 = Method	#88.#355;	//  nanoxml/XMLElement.scanWhitespace:()C
const #70 = String	#356;	//  <
const #71 = Method	#88.#357;	//  nanoxml/XMLElement.expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
const #72 = Method	#88.#358;	//  nanoxml/XMLElement.readChar:()C
const #73 = Method	#88.#359;	//  nanoxml/XMLElement.skipSpecialTag:(I)V
const #74 = Method	#88.#360;	//  nanoxml/XMLElement.unreadChar:(C)V
const #75 = Method	#88.#361;	//  nanoxml/XMLElement.scanElement:(Lnanoxml/XMLElement;)V
const #76 = class	#362;	//  java/io/StringReader
const #77 = Method	#76.#363;	//  java/io/StringReader."<init>":(Ljava/lang/String;)V
const #78 = class	#364;	//  java/io/IOException
const #79 = Method	#19.#365;	//  java/lang/String.substring:(I)Ljava/lang/String;
const #80 = Method	#88.#366;	//  nanoxml/XMLElement.parseString:(Ljava/lang/String;)V
const #81 = Method	#19.#367;	//  java/lang/String.substring:(II)Ljava/lang/String;
const #82 = Method	#88.#368;	//  nanoxml/XMLElement.parseCharArray:([CIII)V
const #83 = class	#369;	//  java/io/CharArrayReader
const #84 = Method	#83.#370;	//  java/io/CharArrayReader."<init>":([CII)V
const #85 = Method	#11.#371;	//  java/util/Vector.removeElement:(Ljava/lang/Object;)Z
const #86 = Method	#1.#372;	//  java/util/Hashtable.remove:(Ljava/lang/Object;)Ljava/lang/Object;
const #87 = Method	#88.#373;	//  nanoxml/XMLElement.removeAttribute:(Ljava/lang/String;)V
const #88 = class	#374;	//  nanoxml/XMLElement
const #89 = Method	#88.#375;	//  nanoxml/XMLElement.setName:(Ljava/lang/String;)V
const #90 = class	#376;	//  java/io/ByteArrayOutputStream
const #91 = Method	#90.#289;	//  java/io/ByteArrayOutputStream."<init>":()V
const #92 = class	#377;	//  java/io/OutputStreamWriter
const #93 = Method	#92.#378;	//  java/io/OutputStreamWriter."<init>":(Ljava/io/OutputStream;)V
const #94 = Method	#88.#379;	//  nanoxml/XMLElement.write:(Ljava/io/Writer;)V
const #95 = Method	#92.#380;	//  java/io/OutputStreamWriter.flush:()V
const #96 = Method	#90.#381;	//  java/io/ByteArrayOutputStream.toByteArray:()[B
const #97 = Method	#19.#382;	//  java/lang/String."<init>":([B)V
const #98 = Method	#88.#383;	//  nanoxml/XMLElement.writeEncoded:(Ljava/io/Writer;Ljava/lang/String;)V
const #99 = Method	#384.#385;	//  java/io/Writer.write:(I)V
const #100 = Method	#384.#386;	//  java/io/Writer.write:(Ljava/lang/String;)V
const #101 = Method	#1.#387;	//  java/util/Hashtable.isEmpty:()Z
const #102 = Method	#19.#388;	//  java/lang/String.length:()I
const #103 = Method	#11.#387;	//  java/util/Vector.isEmpty:()Z
const #104 = Method	#88.#389;	//  nanoxml/XMLElement.enumerateChildren:()Ljava/util/Enumeration;
const #105 = Method	#19.#390;	//  java/lang/String.charAt:(I)C
const #106 = Method	#49.#391;	//  java/lang/Integer.toString:(II)Ljava/lang/String;
const #107 = Method	#117.#392;	//  java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
const #108 = String	#393;	//  ' or \"
const #109 = Method	#88.#394;	//  nanoxml/XMLElement.resolveEntity:(Ljava/lang/StringBuffer;)V
const #110 = Method	#88.#395;	//  nanoxml/XMLElement.checkCDATA:(Ljava/lang/StringBuffer;)Z
const #111 = String	#396;	//  CDATA[
const #112 = Method	#88.#397;	//  nanoxml/XMLElement.checkLiteral:(Ljava/lang/String;)Z
const #113 = String	#398;	//  >
const #114 = Method	#88.#399;	//  nanoxml/XMLElement.skipComment:()V
const #115 = Method	#400.#401;	//  java/io/Reader.read:()I
const #116 = Method	#88.#402;	//  nanoxml/XMLElement.unexpectedEndOfData:()Lnanoxml/XMLParseException;
const #117 = class	#403;	//  java/lang/StringBuffer
const #118 = Method	#117.#289;	//  java/lang/StringBuffer."<init>":()V
const #119 = Method	#88.#404;	//  nanoxml/XMLElement.scanIdentifier:(Ljava/lang/StringBuffer;)V
const #120 = Method	#117.#316;	//  java/lang/StringBuffer.toString:()Ljava/lang/String;
const #121 = Method	#117.#405;	//  java/lang/StringBuffer.setLength:(I)V
const #122 = String	#406;	//  =
const #123 = Method	#88.#407;	//  nanoxml/XMLElement.scanString:(Ljava/lang/StringBuffer;)V
const #124 = Method	#88.#408;	//  nanoxml/XMLElement.scanWhitespace:(Ljava/lang/StringBuffer;)C
const #125 = Method	#88.#409;	//  nanoxml/XMLElement.scanPCData:(Ljava/lang/StringBuffer;)V
const #126 = Method	#117.#388;	//  java/lang/StringBuffer.length:()I
const #127 = String	#410;	//  Comment or Element
const #128 = Method	#88.#411;	//  nanoxml/XMLElement.createAnotherElement:()Lnanoxml/XMLElement;
const #129 = Method	#88.#412;	//  nanoxml/XMLElement.addChild:(Lnanoxml/XMLElement;)V
const #130 = Method	#19.#413;	//  java/lang/String.trim:()Ljava/lang/String;
const #131 = Method	#88.#414;	//  nanoxml/XMLElement.setContent:(Ljava/lang/String;)V
const #132 = String	#415;	//  /
const #133 = Method	#49.#416;	//  java/lang/Integer.parseInt:(Ljava/lang/String;I)I
const #134 = Method	#88.#417;	//  nanoxml/XMLElement.unknownEntity:(Ljava/lang/String;)Lnanoxml/XMLParseException;
const #135 = class	#418;	//  "[C"
const #136 = Method	#117.#419;	//  java/lang/StringBuffer.append:([C)Ljava/lang/StringBuffer;
const #137 = String	#420;	//  Invalid value set (entity name = \"
const #138 = Method	#117.#421;	//  java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
const #139 = String	#422;	//  \")
const #140 = class	#423;	//  nanoxml/XMLParseException
const #141 = Method	#140.#424;	//  nanoxml/XMLParseException."<init>":(Ljava/lang/String;ILjava/lang/String;)V
const #142 = String	#425;	//  Attribute \"
const #143 = String	#426;	//  \" does not contain a valid 
const #144 = String	#427;	//  value (\"
const #145 = String	#428;	//  Unexpected end of data reached
const #146 = String	#429;	//  Syntax error while parsing 
const #147 = String	#430;	//  Expected: 
const #148 = String	#431;	//  Unknown or invalid entity: &
const #149 = String	#432;	//  ;
const #150 = class	#433;	//  java/lang/Object
const #151 = Asciz	serialVersionUID;
const #152 = Asciz	J;
const #153 = Asciz	ConstantValue;
const #154 = long	6685035139346394777l;
const #156 = Asciz	NANOXML_MAJOR_VERSION;
const #157 = Asciz	I;
const #158 = int	2;
const #159 = Asciz	NANOXML_MINOR_VERSION;
const #160 = Asciz	attributes;
const #161 = Asciz	Ljava/util/Hashtable;;
const #162 = Asciz	children;
const #163 = Asciz	Ljava/util/Vector;;
const #164 = Asciz	name;
const #165 = Asciz	Ljava/lang/String;;
const #166 = Asciz	contents;
const #167 = Asciz	entities;
const #168 = Asciz	lineNr;
const #169 = Asciz	ignoreCase;
const #170 = Asciz	Z;
const #171 = Asciz	ignoreWhitespace;
const #172 = Asciz	charReadTooMuch;
const #173 = Asciz	C;
const #174 = Asciz	reader;
const #175 = Asciz	Ljava/io/Reader;;
const #176 = Asciz	parserLineNr;
const #177 = Asciz	<init>;
const #178 = Asciz	()V;
const #179 = Asciz	Code;
const #180 = Asciz	(Ljava/util/Hashtable;)V;
const #181 = Asciz	(Z)V;
const #182 = Asciz	(Ljava/util/Hashtable;Z)V;
const #183 = Asciz	(Ljava/util/Hashtable;ZZ)V;
const #184 = Asciz	(Ljava/util/Hashtable;ZZZ)V;
const #185 = Asciz	addChild;
const #186 = Asciz	(Lnanoxml/XMLElement;)V;
const #187 = Asciz	setAttribute;
const #188 = Asciz	(Ljava/lang/String;Ljava/lang/Object;)V;
const #189 = Asciz	addProperty;
const #190 = Asciz	Deprecated;
const #191 = Asciz	setIntAttribute;
const #192 = Asciz	(Ljava/lang/String;I)V;
const #193 = Asciz	setDoubleAttribute;
const #194 = Asciz	(Ljava/lang/String;D)V;
const #195 = Asciz	countChildren;
const #196 = Asciz	()I;
const #197 = Asciz	enumerateAttributeNames;
const #198 = Asciz	()Ljava/util/Enumeration;;
const #199 = Asciz	enumeratePropertyNames;
const #200 = Asciz	enumerateChildren;
const #201 = Asciz	getChildren;
const #202 = Asciz	()Ljava/util/Vector;;
const #203 = Asciz	getContents;
const #204 = Asciz	()Ljava/lang/String;;
const #205 = Asciz	getContent;
const #206 = Asciz	getLineNr;
const #207 = Asciz	getAttribute;
const #208 = Asciz	(Ljava/lang/String;)Ljava/lang/Object;;
const #209 = Asciz	(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;;
const #210 = Asciz	(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)Ljava/lang/Object;;
const #211 = Asciz	getStringAttribute;
const #212 = Asciz	(Ljava/lang/String;)Ljava/lang/String;;
const #213 = Asciz	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;;
const #214 = Asciz	(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)Ljava/lang/String;;
const #215 = Asciz	getIntAttribute;
const #216 = Asciz	(Ljava/lang/String;)I;
const #217 = Asciz	(Ljava/lang/String;I)I;
const #218 = Asciz	(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)I;
const #219 = Asciz	getDoubleAttribute;
const #220 = Asciz	(Ljava/lang/String;)D;
const #221 = Asciz	(Ljava/lang/String;D)D;
const #222 = Asciz	(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)D;
const #223 = Asciz	getBooleanAttribute;
const #224 = Asciz	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z;
const #225 = Asciz	getIntProperty;
const #226 = Asciz	(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;)I;
const #227 = Asciz	getProperty;
const #228 = Asciz	(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;)Ljava/lang/Object;;
const #229 = Asciz	getStringProperty;
const #230 = Asciz	(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;)Ljava/lang/String;;
const #231 = Asciz	getSpecialIntProperty;
const #232 = Asciz	getSpecialDoubleProperty;
const #233 = Asciz	(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;)D;
const #234 = Asciz	getName;
const #235 = Asciz	getTagName;
const #236 = Asciz	parseFromReader;
const #237 = Asciz	(Ljava/io/Reader;)V;
const #238 = Asciz	Exceptions;
const #239 = Asciz	(Ljava/io/Reader;I)V;
const #240 = Asciz	parseString;
const #241 = Asciz	(Ljava/lang/String;)V;
const #242 = Asciz	(Ljava/lang/String;II)V;
const #243 = Asciz	(Ljava/lang/String;III)V;
const #244 = Asciz	parseCharArray;
const #245 = Asciz	([CII)V;
const #246 = Asciz	([CIII)V;
const #247 = Asciz	removeChild;
const #248 = Asciz	removeAttribute;
const #249 = Asciz	removeProperty;
const #250 = Asciz	createAnotherElement;
const #251 = Asciz	()Lnanoxml/XMLElement;;
const #252 = Asciz	setContent;
const #253 = Asciz	setTagName;
const #254 = Asciz	setName;
const #255 = Asciz	toString;
const #256 = Asciz	write;
const #257 = Asciz	(Ljava/io/Writer;)V;
const #258 = Asciz	writeEncoded;
const #259 = Asciz	(Ljava/io/Writer;Ljava/lang/String;)V;
const #260 = Asciz	scanIdentifier;
const #261 = Asciz	(Ljava/lang/StringBuffer;)V;
const #262 = Asciz	scanWhitespace;
const #263 = Asciz	()C;
const #264 = Asciz	(Ljava/lang/StringBuffer;)C;
const #265 = Asciz	scanString;
const #266 = Asciz	scanPCData;
const #267 = Asciz	checkCDATA;
const #268 = Asciz	(Ljava/lang/StringBuffer;)Z;
const #269 = Asciz	skipComment;
const #270 = Asciz	skipSpecialTag;
const #271 = Asciz	(I)V;
const #272 = Asciz	checkLiteral;
const #273 = Asciz	(Ljava/lang/String;)Z;
const #274 = Asciz	readChar;
const #275 = Asciz	scanElement;
const #276 = Asciz	resolveEntity;
const #277 = Asciz	unreadChar;
const #278 = Asciz	(C)V;
const #279 = Asciz	invalidValueSet;
const #280 = Asciz	(Ljava/lang/String;)Lnanoxml/XMLParseException;;
const #281 = Asciz	invalidValue;
const #282 = Asciz	(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;;
const #283 = Asciz	unexpectedEndOfData;
const #284 = Asciz	()Lnanoxml/XMLParseException;;
const #285 = Asciz	syntaxError;
const #286 = Asciz	expectedInput;
const #287 = Asciz	unknownEntity;
const #288 = Asciz	java/util/Hashtable;
const #289 = NameAndType	#177:#178;//  "<init>":()V
const #290 = NameAndType	#177:#184;//  "<init>":(Ljava/util/Hashtable;ZZZ)V
const #291 = NameAndType	#171:#170;//  ignoreWhitespace:Z
const #292 = NameAndType	#169:#170;//  ignoreCase:Z
const #293 = NameAndType	#164:#165;//  name:Ljava/lang/String;
const #294 = Asciz	;
const #295 = NameAndType	#166:#165;//  contents:Ljava/lang/String;
const #296 = NameAndType	#160:#161;//  attributes:Ljava/util/Hashtable;
const #297 = Asciz	java/util/Vector;
const #298 = NameAndType	#162:#163;//  children:Ljava/util/Vector;
const #299 = NameAndType	#167:#161;//  entities:Ljava/util/Hashtable;
const #300 = NameAndType	#168:#157;//  lineNr:I
const #301 = NameAndType	#434:#198;//  keys:()Ljava/util/Enumeration;
const #302 = class	#435;	//  java/util/Enumeration
const #303 = NameAndType	#436:#437;//  nextElement:()Ljava/lang/Object;
const #304 = NameAndType	#438:#439;//  get:(Ljava/lang/Object;)Ljava/lang/Object;
const #305 = Asciz	java/lang/String;
const #306 = NameAndType	#440:#441;//  toCharArray:()[C
const #307 = NameAndType	#442:#443;//  put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #308 = NameAndType	#444:#445;//  hasMoreElements:()Z
const #309 = Asciz	amp;
const #310 = Asciz	quot;
const #311 = Asciz	apos;
const #312 = Asciz	lt;
const #313 = Asciz	gt;
const #314 = NameAndType	#446:#447;//  addElement:(Ljava/lang/Object;)V
const #315 = NameAndType	#448:#204;//  toUpperCase:()Ljava/lang/String;
const #316 = NameAndType	#255:#204;//  toString:()Ljava/lang/String;
const #317 = NameAndType	#187:#188;//  setAttribute:(Ljava/lang/String;Ljava/lang/Object;)V
const #318 = NameAndType	#255:#449;//  toString:(I)Ljava/lang/String;
const #319 = NameAndType	#191:#192;//  setIntAttribute:(Ljava/lang/String;I)V
const #320 = NameAndType	#255:#450;//  toString:(D)Ljava/lang/String;
const #321 = NameAndType	#193:#194;//  setDoubleAttribute:(Ljava/lang/String;D)V
const #322 = NameAndType	#451:#196;//  size:()I
const #323 = NameAndType	#197:#198;//  enumerateAttributeNames:()Ljava/util/Enumeration;
const #324 = NameAndType	#452:#198;//  elements:()Ljava/util/Enumeration;
const #325 = NameAndType	#453:#437;//  clone:()Ljava/lang/Object;
const #326 = Asciz	java/lang/Exception;
const #327 = NameAndType	#205:#204;//  getContent:()Ljava/lang/String;
const #328 = NameAndType	#207:#209;//  getAttribute:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
const #329 = NameAndType	#281:#282;//  invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
const #330 = NameAndType	#211:#213;//  getStringAttribute:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
const #331 = NameAndType	#207:#210;//  getAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)Ljava/lang/Object;
const #332 = NameAndType	#215:#217;//  getIntAttribute:(Ljava/lang/String;I)I
const #333 = NameAndType	#454:#216;//  parseInt:(Ljava/lang/String;)I
const #334 = Asciz	java/lang/NumberFormatException;
const #335 = Asciz	java/lang/Integer;
const #336 = Asciz	java/lang/ClassCastException;
const #337 = NameAndType	#279:#280;//  invalidValueSet:(Ljava/lang/String;)Lnanoxml/XMLParseException;
const #338 = NameAndType	#455:#456;//  valueOf:(Ljava/lang/String;)Ljava/lang/Integer;
const #339 = NameAndType	#457:#196;//  intValue:()I
const #340 = NameAndType	#219:#221;//  getDoubleAttribute:(Ljava/lang/String;D)D
const #341 = NameAndType	#455:#458;//  valueOf:(Ljava/lang/String;)Ljava/lang/Double;
const #342 = NameAndType	#459:#460;//  doubleValue:()D
const #343 = Asciz	java/lang/Double;
const #344 = NameAndType	#461:#462;//  equals:(Ljava/lang/Object;)Z
const #345 = NameAndType	#215:#218;//  getIntAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)I
const #346 = NameAndType	#211:#212;//  getStringAttribute:(Ljava/lang/String;)Ljava/lang/String;
const #347 = NameAndType	#223:#224;//  getBooleanAttribute:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z
const #348 = NameAndType	#211:#214;//  getStringAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)Ljava/lang/String;
const #349 = NameAndType	#219:#222;//  getDoubleAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)D
const #350 = NameAndType	#234:#204;//  getName:()Ljava/lang/String;
const #351 = NameAndType	#236:#239;//  parseFromReader:(Ljava/io/Reader;I)V
const #352 = NameAndType	#172:#173;//  charReadTooMuch:C
const #353 = NameAndType	#174:#175;//  reader:Ljava/io/Reader;
const #354 = NameAndType	#176:#157;//  parserLineNr:I
const #355 = NameAndType	#262:#263;//  scanWhitespace:()C
const #356 = Asciz	<;
const #357 = NameAndType	#286:#280;//  expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
const #358 = NameAndType	#274:#263;//  readChar:()C
const #359 = NameAndType	#270:#271;//  skipSpecialTag:(I)V
const #360 = NameAndType	#277:#278;//  unreadChar:(C)V
const #361 = NameAndType	#275:#186;//  scanElement:(Lnanoxml/XMLElement;)V
const #362 = Asciz	java/io/StringReader;
const #363 = NameAndType	#177:#241;//  "<init>":(Ljava/lang/String;)V
const #364 = Asciz	java/io/IOException;
const #365 = NameAndType	#463:#449;//  substring:(I)Ljava/lang/String;
const #366 = NameAndType	#240:#241;//  parseString:(Ljava/lang/String;)V
const #367 = NameAndType	#463:#464;//  substring:(II)Ljava/lang/String;
const #368 = NameAndType	#244:#246;//  parseCharArray:([CIII)V
const #369 = Asciz	java/io/CharArrayReader;
const #370 = NameAndType	#177:#245;//  "<init>":([CII)V
const #371 = NameAndType	#465:#462;//  removeElement:(Ljava/lang/Object;)Z
const #372 = NameAndType	#466:#439;//  remove:(Ljava/lang/Object;)Ljava/lang/Object;
const #373 = NameAndType	#248:#241;//  removeAttribute:(Ljava/lang/String;)V
const #374 = Asciz	nanoxml/XMLElement;
const #375 = NameAndType	#254:#241;//  setName:(Ljava/lang/String;)V
const #376 = Asciz	java/io/ByteArrayOutputStream;
const #377 = Asciz	java/io/OutputStreamWriter;
const #378 = NameAndType	#177:#467;//  "<init>":(Ljava/io/OutputStream;)V
const #379 = NameAndType	#256:#257;//  write:(Ljava/io/Writer;)V
const #380 = NameAndType	#468:#178;//  flush:()V
const #381 = NameAndType	#469:#470;//  toByteArray:()[B
const #382 = NameAndType	#177:#471;//  "<init>":([B)V
const #383 = NameAndType	#258:#259;//  writeEncoded:(Ljava/io/Writer;Ljava/lang/String;)V
const #384 = class	#472;	//  java/io/Writer
const #385 = NameAndType	#256:#271;//  write:(I)V
const #386 = NameAndType	#256:#241;//  write:(Ljava/lang/String;)V
const #387 = NameAndType	#473:#445;//  isEmpty:()Z
const #388 = NameAndType	#474:#196;//  length:()I
const #389 = NameAndType	#200:#198;//  enumerateChildren:()Ljava/util/Enumeration;
const #390 = NameAndType	#475:#476;//  charAt:(I)C
const #391 = NameAndType	#255:#464;//  toString:(II)Ljava/lang/String;
const #392 = NameAndType	#477:#478;//  append:(C)Ljava/lang/StringBuffer;
const #393 = Asciz	' or \";
const #394 = NameAndType	#276:#261;//  resolveEntity:(Ljava/lang/StringBuffer;)V
const #395 = NameAndType	#267:#268;//  checkCDATA:(Ljava/lang/StringBuffer;)Z
const #396 = Asciz	CDATA[;
const #397 = NameAndType	#272:#273;//  checkLiteral:(Ljava/lang/String;)Z
const #398 = Asciz	>;
const #399 = NameAndType	#269:#178;//  skipComment:()V
const #400 = class	#479;	//  java/io/Reader
const #401 = NameAndType	#480:#196;//  read:()I
const #402 = NameAndType	#283:#284;//  unexpectedEndOfData:()Lnanoxml/XMLParseException;
const #403 = Asciz	java/lang/StringBuffer;
const #404 = NameAndType	#260:#261;//  scanIdentifier:(Ljava/lang/StringBuffer;)V
const #405 = NameAndType	#481:#271;//  setLength:(I)V
const #406 = Asciz	=;
const #407 = NameAndType	#265:#261;//  scanString:(Ljava/lang/StringBuffer;)V
const #408 = NameAndType	#262:#264;//  scanWhitespace:(Ljava/lang/StringBuffer;)C
const #409 = NameAndType	#266:#261;//  scanPCData:(Ljava/lang/StringBuffer;)V
const #410 = Asciz	Comment or Element;
const #411 = NameAndType	#250:#251;//  createAnotherElement:()Lnanoxml/XMLElement;
const #412 = NameAndType	#185:#186;//  addChild:(Lnanoxml/XMLElement;)V
const #413 = NameAndType	#482:#204;//  trim:()Ljava/lang/String;
const #414 = NameAndType	#252:#241;//  setContent:(Ljava/lang/String;)V
const #415 = Asciz	/;
const #416 = NameAndType	#454:#217;//  parseInt:(Ljava/lang/String;I)I
const #417 = NameAndType	#287:#280;//  unknownEntity:(Ljava/lang/String;)Lnanoxml/XMLParseException;
const #418 = Asciz	[C;
const #419 = NameAndType	#477:#483;//  append:([C)Ljava/lang/StringBuffer;
const #420 = Asciz	Invalid value set (entity name = \";
const #421 = NameAndType	#477:#484;//  append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
const #422 = Asciz	\");
const #423 = Asciz	nanoxml/XMLParseException;
const #424 = NameAndType	#177:#485;//  "<init>":(Ljava/lang/String;ILjava/lang/String;)V
const #425 = Asciz	Attribute \";
const #426 = Asciz	\" does not contain a valid ;
const #427 = Asciz	value (\";
const #428 = Asciz	Unexpected end of data reached;
const #429 = Asciz	Syntax error while parsing ;
const #430 = Asciz	Expected: ;
const #431 = Asciz	Unknown or invalid entity: &;
const #432 = Asciz	;;
const #433 = Asciz	java/lang/Object;
const #434 = Asciz	keys;
const #435 = Asciz	java/util/Enumeration;
const #436 = Asciz	nextElement;
const #437 = Asciz	()Ljava/lang/Object;;
const #438 = Asciz	get;
const #439 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #440 = Asciz	toCharArray;
const #441 = Asciz	()[C;
const #442 = Asciz	put;
const #443 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
const #444 = Asciz	hasMoreElements;
const #445 = Asciz	()Z;
const #446 = Asciz	addElement;
const #447 = Asciz	(Ljava/lang/Object;)V;
const #448 = Asciz	toUpperCase;
const #449 = Asciz	(I)Ljava/lang/String;;
const #450 = Asciz	(D)Ljava/lang/String;;
const #451 = Asciz	size;
const #452 = Asciz	elements;
const #453 = Asciz	clone;
const #454 = Asciz	parseInt;
const #455 = Asciz	valueOf;
const #456 = Asciz	(Ljava/lang/String;)Ljava/lang/Integer;;
const #457 = Asciz	intValue;
const #458 = Asciz	(Ljava/lang/String;)Ljava/lang/Double;;
const #459 = Asciz	doubleValue;
const #460 = Asciz	()D;
const #461 = Asciz	equals;
const #462 = Asciz	(Ljava/lang/Object;)Z;
const #463 = Asciz	substring;
const #464 = Asciz	(II)Ljava/lang/String;;
const #465 = Asciz	removeElement;
const #466 = Asciz	remove;
const #467 = Asciz	(Ljava/io/OutputStream;)V;
const #468 = Asciz	flush;
const #469 = Asciz	toByteArray;
const #470 = Asciz	()[B;
const #471 = Asciz	([B)V;
const #472 = Asciz	java/io/Writer;
const #473 = Asciz	isEmpty;
const #474 = Asciz	length;
const #475 = Asciz	charAt;
const #476 = Asciz	(I)C;
const #477 = Asciz	append;
const #478 = Asciz	(C)Ljava/lang/StringBuffer;;
const #479 = Asciz	java/io/Reader;
const #480 = Asciz	read;
const #481 = Asciz	setLength;
const #482 = Asciz	trim;
const #483 = Asciz	([C)Ljava/lang/StringBuffer;;
const #484 = Asciz	(Ljava/lang/String;)Ljava/lang/StringBuffer;;
const #485 = Asciz	(Ljava/lang/String;ILjava/lang/String;)V;

{
static final long serialVersionUID;
  Constant value: long 6685035139346394777l
public static final int NANOXML_MAJOR_VERSION;
  Constant value: int 2
public static final int NANOXML_MINOR_VERSION;
  Constant value: int 2
public nanoxml.XMLElement();
  Code:
   Stack=5, Locals=1, Args_size=1
   0:	aload_0
   1:	new	#1; //class java/util/Hashtable
   4:	dup
   5:	invokespecial	#2; //Method java/util/Hashtable."<init>":()V
   8:	iconst_0
   9:	iconst_1
   10:	iconst_1
   11:	invokespecial	#3; //Method "<init>":(Ljava/util/Hashtable;ZZZ)V
   14:	return

public nanoxml.XMLElement(java.util.Hashtable);
  Code:
   Stack=5, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	iconst_0
   3:	iconst_1
   4:	iconst_1
   5:	invokespecial	#3; //Method "<init>":(Ljava/util/Hashtable;ZZZ)V
   8:	return

public nanoxml.XMLElement(boolean);
  Code:
   Stack=5, Locals=2, Args_size=2
   0:	aload_0
   1:	new	#1; //class java/util/Hashtable
   4:	dup
   5:	invokespecial	#2; //Method java/util/Hashtable."<init>":()V
   8:	iload_1
   9:	iconst_1
   10:	iconst_1
   11:	invokespecial	#3; //Method "<init>":(Ljava/util/Hashtable;ZZZ)V
   14:	return

public nanoxml.XMLElement(java.util.Hashtable, boolean);
  Code:
   Stack=5, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	iload_2
   3:	iconst_1
   4:	iconst_1
   5:	invokespecial	#3; //Method "<init>":(Ljava/util/Hashtable;ZZZ)V
   8:	return

public nanoxml.XMLElement(java.util.Hashtable, boolean, boolean);
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	aload_0
   1:	aload_1
   2:	iload_2
   3:	iconst_1
   4:	iload_3
   5:	invokespecial	#3; //Method "<init>":(Ljava/util/Hashtable;ZZZ)V
   8:	return

protected nanoxml.XMLElement(java.util.Hashtable, boolean, boolean, boolean);
  Code:
   Stack=6, Locals=8, Args_size=5
   0:	aload_0
   1:	invokespecial	#4; //Method java/lang/Object."<init>":()V
   4:	aload_0
   5:	iload_2
   6:	putfield	#5; //Field ignoreWhitespace:Z
   9:	aload_0
   10:	iload	4
   12:	putfield	#6; //Field ignoreCase:Z
   15:	aload_0
   16:	aconst_null
   17:	putfield	#7; //Field name:Ljava/lang/String;
   20:	aload_0
   21:	ldc	#8; //String 
   23:	putfield	#9; //Field contents:Ljava/lang/String;
   26:	aload_0
   27:	new	#1; //class java/util/Hashtable
   30:	dup
   31:	invokespecial	#2; //Method java/util/Hashtable."<init>":()V
   34:	putfield	#10; //Field attributes:Ljava/util/Hashtable;
   37:	aload_0
   38:	new	#11; //class java/util/Vector
   41:	dup
   42:	invokespecial	#12; //Method java/util/Vector."<init>":()V
   45:	putfield	#13; //Field children:Ljava/util/Vector;
   48:	aload_0
   49:	aload_1
   50:	putfield	#14; //Field entities:Ljava/util/Hashtable;
   53:	aload_0
   54:	iconst_0
   55:	putfield	#15; //Field lineNr:I
   58:	aload_0
   59:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   62:	invokevirtual	#16; //Method java/util/Hashtable.keys:()Ljava/util/Enumeration;
   65:	astore	5
   67:	goto	120
   70:	aload	5
   72:	invokeinterface	#17,  1; //InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
   77:	astore	6
   79:	aload_0
   80:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   83:	aload	6
   85:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   88:	astore	7
   90:	aload	7
   92:	instanceof	#19; //class java/lang/String
   95:	ifeq	120
   98:	aload	7
   100:	checkcast	#19; //class java/lang/String
   103:	invokevirtual	#20; //Method java/lang/String.toCharArray:()[C
   106:	astore	7
   108:	aload_0
   109:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   112:	aload	6
   114:	aload	7
   116:	invokevirtual	#21; //Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   119:	pop
   120:	aload	5
   122:	invokeinterface	#22,  1; //InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
   127:	ifne	70
   130:	iload_3
   131:	ifeq	224
   134:	aload_0
   135:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   138:	ldc	#23; //String amp
   140:	iconst_1
   141:	newarray char
   143:	dup
   144:	iconst_0
   145:	bipush	38
   147:	castore
   148:	invokevirtual	#21; //Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   151:	pop
   152:	aload_0
   153:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   156:	ldc	#24; //String quot
   158:	iconst_1
   159:	newarray char
   161:	dup
   162:	iconst_0
   163:	bipush	34
   165:	castore
   166:	invokevirtual	#21; //Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   169:	pop
   170:	aload_0
   171:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   174:	ldc	#25; //String apos
   176:	iconst_1
   177:	newarray char
   179:	dup
   180:	iconst_0
   181:	bipush	39
   183:	castore
   184:	invokevirtual	#21; //Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   187:	pop
   188:	aload_0
   189:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   192:	ldc	#26; //String lt
   194:	iconst_1
   195:	newarray char
   197:	dup
   198:	iconst_0
   199:	bipush	60
   201:	castore
   202:	invokevirtual	#21; //Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   205:	pop
   206:	aload_0
   207:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   210:	ldc	#27; //String gt
   212:	iconst_1
   213:	newarray char
   215:	dup
   216:	iconst_0
   217:	bipush	62
   219:	castore
   220:	invokevirtual	#21; //Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   223:	pop
   224:	return

public void addChild(nanoxml.XMLElement);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	getfield	#13; //Field children:Ljava/util/Vector;
   4:	aload_1
   5:	invokevirtual	#28; //Method java/util/Vector.addElement:(Ljava/lang/Object;)V
   8:	return

public void setAttribute(java.lang.String, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	aload_2
   18:	invokevirtual	#30; //Method java/lang/Object.toString:()Ljava/lang/String;
   21:	invokevirtual	#21; //Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   24:	pop
   25:	return

public void addProperty(java.lang.String, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokevirtual	#31; //Method setAttribute:(Ljava/lang/String;Ljava/lang/Object;)V
   6:	return
  Deprecated: true

public void setIntAttribute(java.lang.String, int);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	iload_2
   18:	invokestatic	#32; //Method java/lang/Integer.toString:(I)Ljava/lang/String;
   21:	invokevirtual	#21; //Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   24:	pop
   25:	return

public void addProperty(java.lang.String, int);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	iload_2
   3:	invokevirtual	#33; //Method setIntAttribute:(Ljava/lang/String;I)V
   6:	return
  Deprecated: true

public void setDoubleAttribute(java.lang.String, double);
  Code:
   Stack=4, Locals=4, Args_size=3
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	dload_2
   18:	invokestatic	#34; //Method java/lang/Double.toString:(D)Ljava/lang/String;
   21:	invokevirtual	#21; //Method java/util/Hashtable.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   24:	pop
   25:	return

public void addProperty(java.lang.String, double);
  Code:
   Stack=4, Locals=4, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	dload_2
   3:	invokevirtual	#35; //Method setDoubleAttribute:(Ljava/lang/String;D)V
   6:	return
  Deprecated: true

public int countChildren();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#13; //Field children:Ljava/util/Vector;
   4:	invokevirtual	#36; //Method java/util/Vector.size:()I
   7:	ireturn

public java.util.Enumeration enumerateAttributeNames();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   4:	invokevirtual	#16; //Method java/util/Hashtable.keys:()Ljava/util/Enumeration;
   7:	areturn

public java.util.Enumeration enumeratePropertyNames();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#37; //Method enumerateAttributeNames:()Ljava/util/Enumeration;
   4:	areturn
  Deprecated: true

public java.util.Enumeration enumerateChildren();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#13; //Field children:Ljava/util/Vector;
   4:	invokevirtual	#38; //Method java/util/Vector.elements:()Ljava/util/Enumeration;
   7:	areturn

public java.util.Vector getChildren();
  Code:
   Stack=1, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#13; //Field children:Ljava/util/Vector;
   4:	invokevirtual	#39; //Method java/util/Vector.clone:()Ljava/lang/Object;
   7:	checkcast	#11; //class java/util/Vector
   10:	areturn
   11:	astore_1
   12:	aconst_null
   13:	areturn
  Exception table:
   from   to  target type
     0    11    11   Class java/lang/Exception


public java.lang.String getContents();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#41; //Method getContent:()Ljava/lang/String;
   4:	areturn
  Deprecated: true

public java.lang.String getContent();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#9; //Field contents:Ljava/lang/String;
   4:	areturn

public int getLineNr();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#15; //Field lineNr:I
   4:	ireturn

public java.lang.Object getAttribute(java.lang.String);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	aconst_null
   3:	invokevirtual	#42; //Method getAttribute:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
   6:	areturn

public java.lang.Object getAttribute(java.lang.String, java.lang.Object);
  Code:
   Stack=2, Locals=4, Args_size=3
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   20:	astore_3
   21:	aload_3
   22:	ifnonnull	27
   25:	aload_2
   26:	astore_3
   27:	aload_3
   28:	areturn

public java.lang.Object getAttribute(java.lang.String, java.util.Hashtable, java.lang.String, boolean);
  Code:
   Stack=3, Locals=7, Args_size=5
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   20:	astore	5
   22:	aload	5
   24:	ifnonnull	30
   27:	aload_3
   28:	astore	5
   30:	aload_2
   31:	aload	5
   33:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   36:	astore	6
   38:	aload	6
   40:	ifnonnull	66
   43:	iload	4
   45:	ifeq	55
   48:	aload	5
   50:	astore	6
   52:	goto	66
   55:	aload_0
   56:	aload_1
   57:	aload	5
   59:	checkcast	#19; //class java/lang/String
   62:	invokevirtual	#43; //Method invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
   65:	athrow
   66:	aload	6
   68:	areturn

public java.lang.String getStringAttribute(java.lang.String);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	aconst_null
   3:	invokevirtual	#44; //Method getStringAttribute:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   6:	areturn

public java.lang.String getStringAttribute(java.lang.String, java.lang.String);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokevirtual	#42; //Method getAttribute:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
   6:	checkcast	#19; //class java/lang/String
   9:	areturn

public java.lang.String getStringAttribute(java.lang.String, java.util.Hashtable, java.lang.String, boolean);
  Code:
   Stack=5, Locals=5, Args_size=5
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	aload_3
   4:	iload	4
   6:	invokevirtual	#45; //Method getAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)Ljava/lang/Object;
   9:	checkcast	#19; //class java/lang/String
   12:	areturn

public int getIntAttribute(java.lang.String);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	iconst_0
   3:	invokevirtual	#46; //Method getIntAttribute:(Ljava/lang/String;I)I
   6:	ireturn

public int getIntAttribute(java.lang.String, int);
  Code:
   Stack=3, Locals=5, Args_size=3
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   20:	checkcast	#19; //class java/lang/String
   23:	astore_3
   24:	aload_3
   25:	ifnonnull	30
   28:	iload_2
   29:	ireturn
   30:	aload_3
   31:	invokestatic	#47; //Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
   34:	ireturn
   35:	astore	4
   37:	aload_0
   38:	aload_1
   39:	aload_3
   40:	invokevirtual	#43; //Method invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
   43:	athrow
  Exception table:
   from   to  target type
    30    35    35   Class java/lang/NumberFormatException


public int getIntAttribute(java.lang.String, java.util.Hashtable, java.lang.String, boolean);
  Code:
   Stack=3, Locals=8, Args_size=5
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   20:	astore	5
   22:	aload	5
   24:	ifnonnull	30
   27:	aload_3
   28:	astore	5
   30:	aload_2
   31:	aload	5
   33:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   36:	checkcast	#49; //class java/lang/Integer
   39:	astore	6
   41:	goto	52
   44:	astore	7
   46:	aload_0
   47:	aload_1
   48:	invokevirtual	#51; //Method invalidValueSet:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   51:	athrow
   52:	aload	6
   54:	ifnonnull	99
   57:	iload	4
   59:	ifne	73
   62:	aload_0
   63:	aload_1
   64:	aload	5
   66:	checkcast	#19; //class java/lang/String
   69:	invokevirtual	#43; //Method invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
   72:	athrow
   73:	aload	5
   75:	checkcast	#19; //class java/lang/String
   78:	invokestatic	#52; //Method java/lang/Integer.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;
   81:	astore	6
   83:	goto	99
   86:	astore	7
   88:	aload_0
   89:	aload_1
   90:	aload	5
   92:	checkcast	#19; //class java/lang/String
   95:	invokevirtual	#43; //Method invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
   98:	athrow
   99:	aload	6
   101:	invokevirtual	#53; //Method java/lang/Integer.intValue:()I
   104:	ireturn
  Exception table:
   from   to  target type
    30    41    44   Class java/lang/ClassCastException

    73    83    86   Class java/lang/NumberFormatException


public double getDoubleAttribute(java.lang.String);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	dconst_0
   3:	invokevirtual	#54; //Method getDoubleAttribute:(Ljava/lang/String;D)D
   6:	dreturn

public double getDoubleAttribute(java.lang.String, double);
  Code:
   Stack=3, Locals=6, Args_size=3
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   20:	checkcast	#19; //class java/lang/String
   23:	astore	4
   25:	aload	4
   27:	ifnonnull	32
   30:	dload_2
   31:	dreturn
   32:	aload	4
   34:	invokestatic	#55; //Method java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;
   37:	invokevirtual	#56; //Method java/lang/Double.doubleValue:()D
   40:	dreturn
   41:	astore	5
   43:	aload_0
   44:	aload_1
   45:	aload	4
   47:	invokevirtual	#43; //Method invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
   50:	athrow
  Exception table:
   from   to  target type
    32    41    41   Class java/lang/NumberFormatException


public double getDoubleAttribute(java.lang.String, java.util.Hashtable, java.lang.String, boolean);
  Code:
   Stack=3, Locals=8, Args_size=5
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   20:	astore	5
   22:	aload	5
   24:	ifnonnull	30
   27:	aload_3
   28:	astore	5
   30:	aload_2
   31:	aload	5
   33:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   36:	checkcast	#57; //class java/lang/Double
   39:	astore	6
   41:	goto	52
   44:	astore	7
   46:	aload_0
   47:	aload_1
   48:	invokevirtual	#51; //Method invalidValueSet:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   51:	athrow
   52:	aload	6
   54:	ifnonnull	99
   57:	iload	4
   59:	ifne	73
   62:	aload_0
   63:	aload_1
   64:	aload	5
   66:	checkcast	#19; //class java/lang/String
   69:	invokevirtual	#43; //Method invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
   72:	athrow
   73:	aload	5
   75:	checkcast	#19; //class java/lang/String
   78:	invokestatic	#55; //Method java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;
   81:	astore	6
   83:	goto	99
   86:	astore	7
   88:	aload_0
   89:	aload_1
   90:	aload	5
   92:	checkcast	#19; //class java/lang/String
   95:	invokevirtual	#43; //Method invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
   98:	athrow
   99:	aload	6
   101:	invokevirtual	#56; //Method java/lang/Double.doubleValue:()D
   104:	dreturn
  Exception table:
   from   to  target type
    30    41    44   Class java/lang/ClassCastException

    73    83    86   Class java/lang/NumberFormatException


public boolean getBooleanAttribute(java.lang.String, java.lang.String, java.lang.String, boolean);
  Code:
   Stack=3, Locals=6, Args_size=5
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   20:	astore	5
   22:	aload	5
   24:	ifnonnull	30
   27:	iload	4
   29:	ireturn
   30:	aload	5
   32:	aload_2
   33:	invokevirtual	#58; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z
   36:	ifeq	41
   39:	iconst_1
   40:	ireturn
   41:	aload	5
   43:	aload_3
   44:	invokevirtual	#58; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z
   47:	ifeq	52
   50:	iconst_0
   51:	ireturn
   52:	aload_0
   53:	aload_1
   54:	aload	5
   56:	checkcast	#19; //class java/lang/String
   59:	invokevirtual	#43; //Method invalidValue:(Ljava/lang/String;Ljava/lang/String;)Lnanoxml/XMLParseException;
   62:	athrow

public int getIntProperty(java.lang.String, java.util.Hashtable, java.lang.String);
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	aload_3
   4:	iconst_0
   5:	invokevirtual	#59; //Method getIntAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)I
   8:	ireturn
  Deprecated: true

public java.lang.String getProperty(java.lang.String);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#60; //Method getStringAttribute:(Ljava/lang/String;)Ljava/lang/String;
   5:	areturn
  Deprecated: true

public java.lang.String getProperty(java.lang.String, java.lang.String);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokevirtual	#44; //Method getStringAttribute:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
   6:	areturn
  Deprecated: true

public int getProperty(java.lang.String, int);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	iload_2
   3:	invokevirtual	#46; //Method getIntAttribute:(Ljava/lang/String;I)I
   6:	ireturn
  Deprecated: true

public double getProperty(java.lang.String, double);
  Code:
   Stack=4, Locals=4, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	dload_2
   3:	invokevirtual	#54; //Method getDoubleAttribute:(Ljava/lang/String;D)D
   6:	dreturn
  Deprecated: true

public boolean getProperty(java.lang.String, java.lang.String, java.lang.String, boolean);
  Code:
   Stack=5, Locals=5, Args_size=5
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	aload_3
   4:	iload	4
   6:	invokevirtual	#61; //Method getBooleanAttribute:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Z
   9:	ireturn
  Deprecated: true

public java.lang.Object getProperty(java.lang.String, java.util.Hashtable, java.lang.String);
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	aload_3
   4:	iconst_0
   5:	invokevirtual	#45; //Method getAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)Ljava/lang/Object;
   8:	areturn
  Deprecated: true

public java.lang.String getStringProperty(java.lang.String, java.util.Hashtable, java.lang.String);
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	aload_3
   4:	iconst_0
   5:	invokevirtual	#62; //Method getStringAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)Ljava/lang/String;
   8:	areturn
  Deprecated: true

public int getSpecialIntProperty(java.lang.String, java.util.Hashtable, java.lang.String);
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	aload_3
   4:	iconst_1
   5:	invokevirtual	#59; //Method getIntAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)I
   8:	ireturn
  Deprecated: true

public double getSpecialDoubleProperty(java.lang.String, java.util.Hashtable, java.lang.String);
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	aload_3
   4:	iconst_1
   5:	invokevirtual	#63; //Method getDoubleAttribute:(Ljava/lang/String;Ljava/util/Hashtable;Ljava/lang/String;Z)D
   8:	dreturn
  Deprecated: true

public java.lang.String getName();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#7; //Field name:Ljava/lang/String;
   4:	areturn

public java.lang.String getTagName();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#64; //Method getName:()Ljava/lang/String;
   4:	areturn
  Deprecated: true

public void parseFromReader(java.io.Reader)   throws java.io.IOException, nanoxml.XMLParseException;
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	iconst_1
   3:	invokevirtual	#65; //Method parseFromReader:(Ljava/io/Reader;I)V
   6:	return
  Exceptions: 
   throws java.io.IOException, nanoxml.XMLParseException
public void parseFromReader(java.io.Reader, int)   throws java.io.IOException, nanoxml.XMLParseException;
  Code:
   Stack=3, Locals=4, Args_size=3
   0:	aload_0
   1:	aconst_null
   2:	putfield	#7; //Field name:Ljava/lang/String;
   5:	aload_0
   6:	ldc	#8; //String 
   8:	putfield	#9; //Field contents:Ljava/lang/String;
   11:	aload_0
   12:	new	#1; //class java/util/Hashtable
   15:	dup
   16:	invokespecial	#2; //Method java/util/Hashtable."<init>":()V
   19:	putfield	#10; //Field attributes:Ljava/util/Hashtable;
   22:	aload_0
   23:	new	#11; //class java/util/Vector
   26:	dup
   27:	invokespecial	#12; //Method java/util/Vector."<init>":()V
   30:	putfield	#13; //Field children:Ljava/util/Vector;
   33:	aload_0
   34:	iconst_0
   35:	putfield	#66; //Field charReadTooMuch:C
   38:	aload_0
   39:	aload_1
   40:	putfield	#67; //Field reader:Ljava/io/Reader;
   43:	aload_0
   44:	iload_2
   45:	putfield	#68; //Field parserLineNr:I
   48:	goto	51
   51:	aload_0
   52:	invokevirtual	#69; //Method scanWhitespace:()C
   55:	istore_3
   56:	iload_3
   57:	bipush	60
   59:	if_icmpeq	69
   62:	aload_0
   63:	ldc	#70; //String <
   65:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   68:	athrow
   69:	aload_0
   70:	invokevirtual	#72; //Method readChar:()C
   73:	istore_3
   74:	iload_3
   75:	bipush	33
   77:	if_icmpeq	86
   80:	iload_3
   81:	bipush	63
   83:	if_icmpne	94
   86:	aload_0
   87:	iconst_0
   88:	invokevirtual	#73; //Method skipSpecialTag:(I)V
   91:	goto	51
   94:	aload_0
   95:	iload_3
   96:	invokevirtual	#74; //Method unreadChar:(C)V
   99:	aload_0
   100:	aload_0
   101:	invokevirtual	#75; //Method scanElement:(Lnanoxml/XMLElement;)V
   104:	return
  Exceptions: 
   throws java.io.IOException, nanoxml.XMLParseException
public void parseString(java.lang.String)   throws nanoxml.XMLParseException;
  Code:
   Stack=4, Locals=3, Args_size=2
   0:	aload_0
   1:	new	#76; //class java/io/StringReader
   4:	dup
   5:	aload_1
   6:	invokespecial	#77; //Method java/io/StringReader."<init>":(Ljava/lang/String;)V
   9:	iconst_1
   10:	invokevirtual	#65; //Method parseFromReader:(Ljava/io/Reader;I)V
   13:	goto	17
   16:	astore_2
   17:	return
  Exception table:
   from   to  target type
     0    13    16   Class java/io/IOException

  Exceptions: 
   throws nanoxml.XMLParseException
public void parseString(java.lang.String, int)   throws nanoxml.XMLParseException;
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	iload_2
   3:	invokevirtual	#79; //Method java/lang/String.substring:(I)Ljava/lang/String;
   6:	invokevirtual	#80; //Method parseString:(Ljava/lang/String;)V
   9:	return
  Exceptions: 
   throws nanoxml.XMLParseException
public void parseString(java.lang.String, int, int)   throws nanoxml.XMLParseException;
  Code:
   Stack=4, Locals=4, Args_size=4
   0:	aload_0
   1:	aload_1
   2:	iload_2
   3:	iload_3
   4:	invokevirtual	#81; //Method java/lang/String.substring:(II)Ljava/lang/String;
   7:	invokevirtual	#80; //Method parseString:(Ljava/lang/String;)V
   10:	return
  Exceptions: 
   throws nanoxml.XMLParseException
public void parseString(java.lang.String, int, int, int)   throws nanoxml.XMLParseException;
  Code:
   Stack=4, Locals=6, Args_size=5
   0:	aload_1
   1:	iload_2
   2:	iload_3
   3:	invokevirtual	#81; //Method java/lang/String.substring:(II)Ljava/lang/String;
   6:	astore_1
   7:	aload_0
   8:	new	#76; //class java/io/StringReader
   11:	dup
   12:	aload_1
   13:	invokespecial	#77; //Method java/io/StringReader."<init>":(Ljava/lang/String;)V
   16:	iload	4
   18:	invokevirtual	#65; //Method parseFromReader:(Ljava/io/Reader;I)V
   21:	goto	26
   24:	astore	5
   26:	return
  Exception table:
   from   to  target type
     7    21    24   Class java/io/IOException

  Exceptions: 
   throws nanoxml.XMLParseException
public void parseCharArray(char[], int, int)   throws nanoxml.XMLParseException;
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	aload_0
   1:	aload_1
   2:	iload_2
   3:	iload_3
   4:	iconst_1
   5:	invokevirtual	#82; //Method parseCharArray:([CIII)V
   8:	return
  Exceptions: 
   throws nanoxml.XMLParseException
public void parseCharArray(char[], int, int, int)   throws nanoxml.XMLParseException;
  Code:
   Stack=5, Locals=6, Args_size=5
   0:	new	#83; //class java/io/CharArrayReader
   3:	dup
   4:	aload_1
   5:	iload_2
   6:	iload_3
   7:	invokespecial	#84; //Method java/io/CharArrayReader."<init>":([CII)V
   10:	astore	5
   12:	aload_0
   13:	aload	5
   15:	iload	4
   17:	invokevirtual	#65; //Method parseFromReader:(Ljava/io/Reader;I)V
   20:	goto	25
   23:	astore	5
   25:	return
  Exception table:
   from   to  target type
     0    20    23   Class java/io/IOException

  Exceptions: 
   throws nanoxml.XMLParseException
public void removeChild(nanoxml.XMLElement);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	getfield	#13; //Field children:Ljava/util/Vector;
   4:	aload_1
   5:	invokevirtual	#85; //Method java/util/Vector.removeElement:(Ljava/lang/Object;)Z
   8:	pop
   9:	return

public void removeAttribute(java.lang.String);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	getfield	#6; //Field ignoreCase:Z
   4:	ifeq	12
   7:	aload_1
   8:	invokevirtual	#29; //Method java/lang/String.toUpperCase:()Ljava/lang/String;
   11:	astore_1
   12:	aload_0
   13:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   16:	aload_1
   17:	invokevirtual	#86; //Method java/util/Hashtable.remove:(Ljava/lang/Object;)Ljava/lang/Object;
   20:	pop
   21:	return

public void removeProperty(java.lang.String);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#87; //Method removeAttribute:(Ljava/lang/String;)V
   5:	return
  Deprecated: true

public void removeChild(java.lang.String);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#87; //Method removeAttribute:(Ljava/lang/String;)V
   5:	return
  Deprecated: true

protected nanoxml.XMLElement createAnotherElement();
  Code:
   Stack=6, Locals=1, Args_size=1
   0:	new	#88; //class nanoxml/XMLElement
   3:	dup
   4:	aload_0
   5:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   8:	aload_0
   9:	getfield	#5; //Field ignoreWhitespace:Z
   12:	iconst_0
   13:	aload_0
   14:	getfield	#6; //Field ignoreCase:Z
   17:	invokespecial	#3; //Method "<init>":(Ljava/util/Hashtable;ZZZ)V
   20:	areturn

public void setContent(java.lang.String);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	putfield	#9; //Field contents:Ljava/lang/String;
   5:	return

public void setTagName(java.lang.String);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#89; //Method setName:(Ljava/lang/String;)V
   5:	return
  Deprecated: true

public void setName(java.lang.String);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	putfield	#7; //Field name:Ljava/lang/String;
   5:	return

public java.lang.String toString();
  Code:
   Stack=3, Locals=3, Args_size=1
   0:	new	#90; //class java/io/ByteArrayOutputStream
   3:	dup
   4:	invokespecial	#91; //Method java/io/ByteArrayOutputStream."<init>":()V
   7:	astore_1
   8:	new	#92; //class java/io/OutputStreamWriter
   11:	dup
   12:	aload_1
   13:	invokespecial	#93; //Method java/io/OutputStreamWriter."<init>":(Ljava/io/OutputStream;)V
   16:	astore_2
   17:	aload_0
   18:	aload_2
   19:	invokevirtual	#94; //Method write:(Ljava/io/Writer;)V
   22:	aload_2
   23:	invokevirtual	#95; //Method java/io/OutputStreamWriter.flush:()V
   26:	new	#19; //class java/lang/String
   29:	dup
   30:	aload_1
   31:	invokevirtual	#96; //Method java/io/ByteArrayOutputStream.toByteArray:()[B
   34:	invokespecial	#97; //Method java/lang/String."<init>":([B)V
   37:	areturn
   38:	astore_1
   39:	aload_0
   40:	invokespecial	#30; //Method java/lang/Object.toString:()Ljava/lang/String;
   43:	areturn
  Exception table:
   from   to  target type
     0    38    38   Class java/io/IOException


public void write(java.io.Writer)   throws java.io.IOException;
  Code:
   Stack=3, Locals=5, Args_size=2
   0:	aload_0
   1:	getfield	#7; //Field name:Ljava/lang/String;
   4:	ifnonnull	17
   7:	aload_0
   8:	aload_1
   9:	aload_0
   10:	getfield	#9; //Field contents:Ljava/lang/String;
   13:	invokevirtual	#98; //Method writeEncoded:(Ljava/io/Writer;Ljava/lang/String;)V
   16:	return
   17:	aload_1
   18:	bipush	60
   20:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   23:	aload_1
   24:	aload_0
   25:	getfield	#7; //Field name:Ljava/lang/String;
   28:	invokevirtual	#100; //Method java/io/Writer.write:(Ljava/lang/String;)V
   31:	aload_0
   32:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   35:	invokevirtual	#101; //Method java/util/Hashtable.isEmpty:()Z
   38:	ifne	120
   41:	aload_0
   42:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   45:	invokevirtual	#16; //Method java/util/Hashtable.keys:()Ljava/util/Enumeration;
   48:	astore_2
   49:	goto	111
   52:	aload_1
   53:	bipush	32
   55:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   58:	aload_2
   59:	invokeinterface	#17,  1; //InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
   64:	checkcast	#19; //class java/lang/String
   67:	astore_3
   68:	aload_0
   69:	getfield	#10; //Field attributes:Ljava/util/Hashtable;
   72:	aload_3
   73:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   76:	checkcast	#19; //class java/lang/String
   79:	astore	4
   81:	aload_1
   82:	aload_3
   83:	invokevirtual	#100; //Method java/io/Writer.write:(Ljava/lang/String;)V
   86:	aload_1
   87:	bipush	61
   89:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   92:	aload_1
   93:	bipush	34
   95:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   98:	aload_0
   99:	aload_1
   100:	aload	4
   102:	invokevirtual	#98; //Method writeEncoded:(Ljava/io/Writer;Ljava/lang/String;)V
   105:	aload_1
   106:	bipush	34
   108:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   111:	aload_2
   112:	invokeinterface	#22,  1; //InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
   117:	ifne	52
   120:	aload_0
   121:	getfield	#9; //Field contents:Ljava/lang/String;
   124:	ifnull	181
   127:	aload_0
   128:	getfield	#9; //Field contents:Ljava/lang/String;
   131:	invokevirtual	#102; //Method java/lang/String.length:()I
   134:	ifle	181
   137:	aload_1
   138:	bipush	62
   140:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   143:	aload_0
   144:	aload_1
   145:	aload_0
   146:	getfield	#9; //Field contents:Ljava/lang/String;
   149:	invokevirtual	#98; //Method writeEncoded:(Ljava/io/Writer;Ljava/lang/String;)V
   152:	aload_1
   153:	bipush	60
   155:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   158:	aload_1
   159:	bipush	47
   161:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   164:	aload_1
   165:	aload_0
   166:	getfield	#7; //Field name:Ljava/lang/String;
   169:	invokevirtual	#100; //Method java/io/Writer.write:(Ljava/lang/String;)V
   172:	aload_1
   173:	bipush	62
   175:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   178:	goto	270
   181:	aload_0
   182:	getfield	#13; //Field children:Ljava/util/Vector;
   185:	invokevirtual	#103; //Method java/util/Vector.isEmpty:()Z
   188:	ifeq	206
   191:	aload_1
   192:	bipush	47
   194:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   197:	aload_1
   198:	bipush	62
   200:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   203:	goto	270
   206:	aload_1
   207:	bipush	62
   209:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   212:	aload_0
   213:	invokevirtual	#104; //Method enumerateChildren:()Ljava/util/Enumeration;
   216:	astore_2
   217:	goto	235
   220:	aload_2
   221:	invokeinterface	#17,  1; //InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
   226:	checkcast	#88; //class nanoxml/XMLElement
   229:	astore_3
   230:	aload_3
   231:	aload_1
   232:	invokevirtual	#94; //Method write:(Ljava/io/Writer;)V
   235:	aload_2
   236:	invokeinterface	#22,  1; //InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
   241:	ifne	220
   244:	aload_1
   245:	bipush	60
   247:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   250:	aload_1
   251:	bipush	47
   253:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   256:	aload_1
   257:	aload_0
   258:	getfield	#7; //Field name:Ljava/lang/String;
   261:	invokevirtual	#100; //Method java/io/Writer.write:(Ljava/lang/String;)V
   264:	aload_1
   265:	bipush	62
   267:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   270:	return
  Exceptions: 
   throws java.io.IOException
protected void writeEncoded(java.io.Writer, java.lang.String)   throws java.io.IOException;
  Code:
   Stack=3, Locals=6, Args_size=3
   0:	iconst_0
   1:	istore_3
   2:	goto	294
   5:	aload_2
   6:	iload_3
   7:	invokevirtual	#105; //Method java/lang/String.charAt:(I)C
   10:	istore	4
   12:	iload	4
   14:	lookupswitch{ //5
		34: 151;
		38: 118;
		39: 190;
		60: 64;
		62: 91;
		default: 229 }
   64:	aload_1
   65:	bipush	38
   67:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   70:	aload_1
   71:	bipush	108
   73:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   76:	aload_1
   77:	bipush	116
   79:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   82:	aload_1
   83:	bipush	59
   85:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   88:	goto	291
   91:	aload_1
   92:	bipush	38
   94:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   97:	aload_1
   98:	bipush	103
   100:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   103:	aload_1
   104:	bipush	116
   106:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   109:	aload_1
   110:	bipush	59
   112:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   115:	goto	291
   118:	aload_1
   119:	bipush	38
   121:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   124:	aload_1
   125:	bipush	97
   127:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   130:	aload_1
   131:	bipush	109
   133:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   136:	aload_1
   137:	bipush	112
   139:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   142:	aload_1
   143:	bipush	59
   145:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   148:	goto	291
   151:	aload_1
   152:	bipush	38
   154:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   157:	aload_1
   158:	bipush	113
   160:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   163:	aload_1
   164:	bipush	117
   166:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   169:	aload_1
   170:	bipush	111
   172:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   175:	aload_1
   176:	bipush	116
   178:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   181:	aload_1
   182:	bipush	59
   184:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   187:	goto	291
   190:	aload_1
   191:	bipush	38
   193:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   196:	aload_1
   197:	bipush	97
   199:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   202:	aload_1
   203:	bipush	112
   205:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   208:	aload_1
   209:	bipush	111
   211:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   214:	aload_1
   215:	bipush	115
   217:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   220:	aload_1
   221:	bipush	59
   223:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   226:	goto	291
   229:	iload	4
   231:	istore	5
   233:	iload	5
   235:	bipush	32
   237:	if_icmplt	247
   240:	iload	5
   242:	bipush	126
   244:	if_icmple	285
   247:	aload_1
   248:	bipush	38
   250:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   253:	aload_1
   254:	bipush	35
   256:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   259:	aload_1
   260:	bipush	120
   262:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   265:	aload_1
   266:	iload	5
   268:	bipush	16
   270:	invokestatic	#106; //Method java/lang/Integer.toString:(II)Ljava/lang/String;
   273:	invokevirtual	#100; //Method java/io/Writer.write:(Ljava/lang/String;)V
   276:	aload_1
   277:	bipush	59
   279:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   282:	goto	291
   285:	aload_1
   286:	iload	4
   288:	invokevirtual	#99; //Method java/io/Writer.write:(I)V
   291:	iinc	3, 1
   294:	iload_3
   295:	aload_2
   296:	invokevirtual	#102; //Method java/lang/String.length:()I
   299:	if_icmplt	5
   302:	return
  Exceptions: 
   throws java.io.IOException
protected void scanIdentifier(java.lang.StringBuffer)   throws java.io.IOException;
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	goto	3
   3:	aload_0
   4:	invokevirtual	#72; //Method readChar:()C
   7:	istore_2
   8:	iload_2
   9:	bipush	65
   11:	if_icmplt	20
   14:	iload_2
   15:	bipush	90
   17:	if_icmple	80
   20:	iload_2
   21:	bipush	97
   23:	if_icmplt	32
   26:	iload_2
   27:	bipush	122
   29:	if_icmple	80
   32:	iload_2
   33:	bipush	48
   35:	if_icmplt	44
   38:	iload_2
   39:	bipush	57
   41:	if_icmple	80
   44:	iload_2
   45:	bipush	95
   47:	if_icmpeq	80
   50:	iload_2
   51:	bipush	46
   53:	if_icmpeq	80
   56:	iload_2
   57:	bipush	58
   59:	if_icmpeq	80
   62:	iload_2
   63:	bipush	45
   65:	if_icmpeq	80
   68:	iload_2
   69:	bipush	126
   71:	if_icmpgt	80
   74:	aload_0
   75:	iload_2
   76:	invokevirtual	#74; //Method unreadChar:(C)V
   79:	return
   80:	aload_1
   81:	iload_2
   82:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   85:	pop
   86:	goto	3
  Exceptions: 
   throws java.io.IOException
protected char scanWhitespace()   throws java.io.IOException;
  Code:
   Stack=1, Locals=2, Args_size=1
   0:	goto	3
   3:	aload_0
   4:	invokevirtual	#72; //Method readChar:()C
   7:	istore_1
   8:	iload_1
   9:	lookupswitch{ //4
		9: 52;
		10: 52;
		13: 52;
		32: 52;
		default: 55 }
   52:	goto	3
   55:	iload_1
   56:	ireturn
  Exceptions: 
   throws java.io.IOException
protected char scanWhitespace(java.lang.StringBuffer)   throws java.io.IOException;
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	goto	3
   3:	aload_0
   4:	invokevirtual	#72; //Method readChar:()C
   7:	istore_2
   8:	iload_2
   9:	lookupswitch{ //4
		9: 52;
		10: 52;
		13: 58;
		32: 52;
		default: 61 }
   52:	aload_1
   53:	iload_2
   54:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   57:	pop
   58:	goto	3
   61:	iload_2
   62:	ireturn
  Exceptions: 
   throws java.io.IOException
protected void scanString(java.lang.StringBuffer)   throws java.io.IOException;
  Code:
   Stack=2, Locals=4, Args_size=2
   0:	aload_0
   1:	invokevirtual	#72; //Method readChar:()C
   4:	istore_2
   5:	iload_2
   6:	bipush	39
   8:	if_icmpeq	24
   11:	iload_2
   12:	bipush	34
   14:	if_icmpeq	24
   17:	aload_0
   18:	ldc	#108; //String ' or \"
   20:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   23:	athrow
   24:	aload_0
   25:	invokevirtual	#72; //Method readChar:()C
   28:	istore_3
   29:	iload_3
   30:	iload_2
   31:	if_icmpne	35
   34:	return
   35:	iload_3
   36:	bipush	38
   38:	if_icmpne	49
   41:	aload_0
   42:	aload_1
   43:	invokevirtual	#109; //Method resolveEntity:(Ljava/lang/StringBuffer;)V
   46:	goto	24
   49:	aload_1
   50:	iload_3
   51:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   54:	pop
   55:	goto	24
  Exceptions: 
   throws java.io.IOException
protected void scanPCData(java.lang.StringBuffer)   throws java.io.IOException;
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	goto	3
   3:	aload_0
   4:	invokevirtual	#72; //Method readChar:()C
   7:	istore_2
   8:	iload_2
   9:	bipush	60
   11:	if_icmpne	40
   14:	aload_0
   15:	invokevirtual	#72; //Method readChar:()C
   18:	istore_2
   19:	iload_2
   20:	bipush	33
   22:	if_icmpne	34
   25:	aload_0
   26:	aload_1
   27:	invokevirtual	#110; //Method checkCDATA:(Ljava/lang/StringBuffer;)Z
   30:	pop
   31:	goto	3
   34:	aload_0
   35:	iload_2
   36:	invokevirtual	#74; //Method unreadChar:(C)V
   39:	return
   40:	iload_2
   41:	bipush	38
   43:	if_icmpne	54
   46:	aload_0
   47:	aload_1
   48:	invokevirtual	#109; //Method resolveEntity:(Ljava/lang/StringBuffer;)V
   51:	goto	3
   54:	aload_1
   55:	iload_2
   56:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   59:	pop
   60:	goto	3
  Exceptions: 
   throws java.io.IOException
protected boolean checkCDATA(java.lang.StringBuffer)   throws java.io.IOException;
  Code:
   Stack=2, Locals=5, Args_size=2
   0:	aload_0
   1:	invokevirtual	#72; //Method readChar:()C
   4:	istore_2
   5:	iload_2
   6:	bipush	91
   8:	if_icmpeq	23
   11:	aload_0
   12:	iload_2
   13:	invokevirtual	#74; //Method unreadChar:(C)V
   16:	aload_0
   17:	iconst_0
   18:	invokevirtual	#73; //Method skipSpecialTag:(I)V
   21:	iconst_0
   22:	ireturn
   23:	aload_0
   24:	ldc	#111; //String CDATA[
   26:	invokevirtual	#112; //Method checkLiteral:(Ljava/lang/String;)Z
   29:	ifne	39
   32:	aload_0
   33:	iconst_1
   34:	invokevirtual	#73; //Method skipSpecialTag:(I)V
   37:	iconst_0
   38:	ireturn
   39:	iconst_0
   40:	istore_3
   41:	goto	180
   44:	aload_0
   45:	invokevirtual	#72; //Method readChar:()C
   48:	istore_2
   49:	iload_2
   50:	lookupswitch{ //2
		62: 106;
		93: 76;
		default: 150 }
   76:	iload_3
   77:	iconst_2
   78:	if_icmpge	87
   81:	iinc	3, 1
   84:	goto	180
   87:	aload_1
   88:	bipush	93
   90:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   93:	pop
   94:	aload_1
   95:	bipush	93
   97:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   100:	pop
   101:	iconst_0
   102:	istore_3
   103:	goto	180
   106:	iload_3
   107:	iconst_2
   108:	if_icmpge	145
   111:	iconst_0
   112:	istore	4
   114:	goto	127
   117:	aload_1
   118:	bipush	93
   120:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   123:	pop
   124:	iinc	4, 1
   127:	iload	4
   129:	iload_3
   130:	if_icmplt	117
   133:	iconst_0
   134:	istore_3
   135:	aload_1
   136:	bipush	62
   138:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   141:	pop
   142:	goto	180
   145:	iconst_3
   146:	istore_3
   147:	goto	180
   150:	iconst_0
   151:	istore	4
   153:	goto	166
   156:	aload_1
   157:	bipush	93
   159:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   162:	pop
   163:	iinc	4, 1
   166:	iload	4
   168:	iload_3
   169:	if_icmplt	156
   172:	aload_1
   173:	iload_2
   174:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   177:	pop
   178:	iconst_0
   179:	istore_3
   180:	iload_3
   181:	iconst_3
   182:	if_icmplt	44
   185:	iconst_1
   186:	ireturn
  Exceptions: 
   throws java.io.IOException
protected void skipComment()   throws java.io.IOException;
  Code:
   Stack=2, Locals=3, Args_size=1
   0:	iconst_2
   1:	istore_1
   2:	goto	24
   5:	aload_0
   6:	invokevirtual	#72; //Method readChar:()C
   9:	istore_2
   10:	iload_2
   11:	bipush	45
   13:	if_icmpne	22
   16:	iinc	1, -1
   19:	goto	24
   22:	iconst_2
   23:	istore_1
   24:	iload_1
   25:	ifgt	5
   28:	aload_0
   29:	invokevirtual	#72; //Method readChar:()C
   32:	bipush	62
   34:	if_icmpeq	44
   37:	aload_0
   38:	ldc	#113; //String >
   40:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   43:	athrow
   44:	return
  Exceptions: 
   throws java.io.IOException
protected void skipSpecialTag(int)   throws java.io.IOException;
  Code:
   Stack=2, Locals=5, Args_size=2
   0:	iconst_1
   1:	istore_2
   2:	iconst_0
   3:	istore_3
   4:	iload_1
   5:	ifne	169
   8:	aload_0
   9:	invokevirtual	#72; //Method readChar:()C
   12:	istore	4
   14:	iload	4
   16:	bipush	91
   18:	if_icmpne	27
   21:	iinc	1, 1
   24:	goto	169
   27:	iload	4
   29:	bipush	45
   31:	if_icmpne	169
   34:	aload_0
   35:	invokevirtual	#72; //Method readChar:()C
   38:	istore	4
   40:	iload	4
   42:	bipush	91
   44:	if_icmpne	53
   47:	iinc	1, 1
   50:	goto	169
   53:	iload	4
   55:	bipush	93
   57:	if_icmpne	66
   60:	iinc	1, -1
   63:	goto	169
   66:	iload	4
   68:	bipush	45
   70:	if_icmpne	169
   73:	aload_0
   74:	invokevirtual	#114; //Method skipComment:()V
   77:	return
   78:	aload_0
   79:	invokevirtual	#72; //Method readChar:()C
   82:	istore	4
   84:	iload_3
   85:	ifne	161
   88:	iload	4
   90:	bipush	34
   92:	if_icmpeq	102
   95:	iload	4
   97:	bipush	39
   99:	if_icmpne	108
   102:	iload	4
   104:	istore_3
   105:	goto	135
   108:	iload_1
   109:	ifgt	135
   112:	iload	4
   114:	bipush	60
   116:	if_icmpne	125
   119:	iinc	2, 1
   122:	goto	135
   125:	iload	4
   127:	bipush	62
   129:	if_icmpne	135
   132:	iinc	2, -1
   135:	iload	4
   137:	bipush	91
   139:	if_icmpne	148
   142:	iinc	1, 1
   145:	goto	169
   148:	iload	4
   150:	bipush	93
   152:	if_icmpne	169
   155:	iinc	1, -1
   158:	goto	169
   161:	iload	4
   163:	iload_3
   164:	if_icmpne	169
   167:	iconst_0
   168:	istore_3
   169:	iload_2
   170:	ifgt	78
   173:	return
  Exceptions: 
   throws java.io.IOException
protected boolean checkLiteral(java.lang.String)   throws java.io.IOException;
  Code:
   Stack=3, Locals=4, Args_size=2
   0:	aload_1
   1:	invokevirtual	#102; //Method java/lang/String.length:()I
   4:	istore_2
   5:	iconst_0
   6:	istore_3
   7:	goto	27
   10:	aload_0
   11:	invokevirtual	#72; //Method readChar:()C
   14:	aload_1
   15:	iload_3
   16:	invokevirtual	#105; //Method java/lang/String.charAt:(I)C
   19:	if_icmpeq	24
   22:	iconst_0
   23:	ireturn
   24:	iinc	3, 1
   27:	iload_3
   28:	iload_2
   29:	if_icmplt	10
   32:	iconst_1
   33:	ireturn
  Exceptions: 
   throws java.io.IOException
protected char readChar()   throws java.io.IOException;
  Code:
   Stack=3, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#66; //Field charReadTooMuch:C
   4:	ifeq	19
   7:	aload_0
   8:	getfield	#66; //Field charReadTooMuch:C
   11:	istore_1
   12:	aload_0
   13:	iconst_0
   14:	putfield	#66; //Field charReadTooMuch:C
   17:	iload_1
   18:	ireturn
   19:	aload_0
   20:	getfield	#67; //Field reader:Ljava/io/Reader;
   23:	invokevirtual	#115; //Method java/io/Reader.read:()I
   26:	istore_1
   27:	iload_1
   28:	ifge	36
   31:	aload_0
   32:	invokevirtual	#116; //Method unexpectedEndOfData:()Lnanoxml/XMLParseException;
   35:	athrow
   36:	iload_1
   37:	bipush	10
   39:	if_icmpne	55
   42:	aload_0
   43:	dup
   44:	getfield	#68; //Field parserLineNr:I
   47:	iconst_1
   48:	iadd
   49:	putfield	#68; //Field parserLineNr:I
   52:	bipush	10
   54:	ireturn
   55:	iload_1
   56:	i2c
   57:	ireturn
  Exceptions: 
   throws java.io.IOException
protected void scanElement(nanoxml.XMLElement)   throws java.io.IOException;
  Code:
   Stack=3, Locals=6, Args_size=2
   0:	new	#117; //class java/lang/StringBuffer
   3:	dup
   4:	invokespecial	#118; //Method java/lang/StringBuffer."<init>":()V
   7:	astore_2
   8:	aload_0
   9:	aload_2
   10:	invokevirtual	#119; //Method scanIdentifier:(Ljava/lang/StringBuffer;)V
   13:	aload_2
   14:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   17:	astore_3
   18:	aload_1
   19:	aload_3
   20:	invokevirtual	#89; //Method setName:(Ljava/lang/String;)V
   23:	aload_0
   24:	invokevirtual	#69; //Method scanWhitespace:()C
   27:	istore	4
   29:	goto	105
   32:	aload_2
   33:	iconst_0
   34:	invokevirtual	#121; //Method java/lang/StringBuffer.setLength:(I)V
   37:	aload_0
   38:	iload	4
   40:	invokevirtual	#74; //Method unreadChar:(C)V
   43:	aload_0
   44:	aload_2
   45:	invokevirtual	#119; //Method scanIdentifier:(Ljava/lang/StringBuffer;)V
   48:	aload_2
   49:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   52:	astore	5
   54:	aload_0
   55:	invokevirtual	#69; //Method scanWhitespace:()C
   58:	istore	4
   60:	iload	4
   62:	bipush	61
   64:	if_icmpeq	74
   67:	aload_0
   68:	ldc	#122; //String =
   70:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   73:	athrow
   74:	aload_0
   75:	aload_0
   76:	invokevirtual	#69; //Method scanWhitespace:()C
   79:	invokevirtual	#74; //Method unreadChar:(C)V
   82:	aload_2
   83:	iconst_0
   84:	invokevirtual	#121; //Method java/lang/StringBuffer.setLength:(I)V
   87:	aload_0
   88:	aload_2
   89:	invokevirtual	#123; //Method scanString:(Ljava/lang/StringBuffer;)V
   92:	aload_1
   93:	aload	5
   95:	aload_2
   96:	invokevirtual	#31; //Method setAttribute:(Ljava/lang/String;Ljava/lang/Object;)V
   99:	aload_0
   100:	invokevirtual	#69; //Method scanWhitespace:()C
   103:	istore	4
   105:	iload	4
   107:	bipush	62
   109:	if_icmpeq	119
   112:	iload	4
   114:	bipush	47
   116:	if_icmpne	32
   119:	iload	4
   121:	bipush	47
   123:	if_icmpne	147
   126:	aload_0
   127:	invokevirtual	#72; //Method readChar:()C
   130:	istore	4
   132:	iload	4
   134:	bipush	62
   136:	if_icmpeq	146
   139:	aload_0
   140:	ldc	#113; //String >
   142:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   145:	athrow
   146:	return
   147:	aload_2
   148:	iconst_0
   149:	invokevirtual	#121; //Method java/lang/StringBuffer.setLength:(I)V
   152:	aload_0
   153:	aload_2
   154:	invokevirtual	#124; //Method scanWhitespace:(Ljava/lang/StringBuffer;)C
   157:	istore	4
   159:	iload	4
   161:	bipush	60
   163:	if_icmpeq	180
   166:	aload_0
   167:	iload	4
   169:	invokevirtual	#74; //Method unreadChar:(C)V
   172:	aload_0
   173:	aload_2
   174:	invokevirtual	#125; //Method scanPCData:(Ljava/lang/StringBuffer;)V
   177:	goto	272
   180:	aload_0
   181:	invokevirtual	#72; //Method readChar:()C
   184:	istore	4
   186:	iload	4
   188:	bipush	33
   190:	if_icmpne	237
   193:	aload_0
   194:	aload_2
   195:	invokevirtual	#110; //Method checkCDATA:(Ljava/lang/StringBuffer;)Z
   198:	ifeq	209
   201:	aload_0
   202:	aload_2
   203:	invokevirtual	#125; //Method scanPCData:(Ljava/lang/StringBuffer;)V
   206:	goto	272
   209:	aload_0
   210:	aload_2
   211:	invokevirtual	#124; //Method scanWhitespace:(Ljava/lang/StringBuffer;)C
   214:	istore	4
   216:	iload	4
   218:	bipush	60
   220:	if_icmpeq	180
   223:	aload_0
   224:	iload	4
   226:	invokevirtual	#74; //Method unreadChar:(C)V
   229:	aload_0
   230:	aload_2
   231:	invokevirtual	#125; //Method scanPCData:(Ljava/lang/StringBuffer;)V
   234:	goto	272
   237:	iload	4
   239:	bipush	47
   241:	if_icmpne	251
   244:	aload_0
   245:	getfield	#5; //Field ignoreWhitespace:Z
   248:	ifeq	256
   251:	aload_2
   252:	iconst_0
   253:	invokevirtual	#121; //Method java/lang/StringBuffer.setLength:(I)V
   256:	iload	4
   258:	bipush	47
   260:	if_icmpne	272
   263:	aload_0
   264:	iload	4
   266:	invokevirtual	#74; //Method unreadChar:(C)V
   269:	goto	272
   272:	aload_2
   273:	invokevirtual	#126; //Method java/lang/StringBuffer.length:()I
   276:	ifne	402
   279:	goto	386
   282:	iload	4
   284:	bipush	33
   286:	if_icmpne	336
   289:	aload_0
   290:	invokevirtual	#72; //Method readChar:()C
   293:	istore	4
   295:	iload	4
   297:	bipush	45
   299:	if_icmpeq	309
   302:	aload_0
   303:	ldc	#127; //String Comment or Element
   305:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   308:	athrow
   309:	aload_0
   310:	invokevirtual	#72; //Method readChar:()C
   313:	istore	4
   315:	iload	4
   317:	bipush	45
   319:	if_icmpeq	329
   322:	aload_0
   323:	ldc	#127; //String Comment or Element
   325:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   328:	athrow
   329:	aload_0
   330:	invokevirtual	#114; //Method skipComment:()V
   333:	goto	360
   336:	aload_0
   337:	iload	4
   339:	invokevirtual	#74; //Method unreadChar:(C)V
   342:	aload_0
   343:	invokevirtual	#128; //Method createAnotherElement:()Lnanoxml/XMLElement;
   346:	astore	5
   348:	aload_0
   349:	aload	5
   351:	invokevirtual	#75; //Method scanElement:(Lnanoxml/XMLElement;)V
   354:	aload_1
   355:	aload	5
   357:	invokevirtual	#129; //Method addChild:(Lnanoxml/XMLElement;)V
   360:	aload_0
   361:	invokevirtual	#69; //Method scanWhitespace:()C
   364:	istore	4
   366:	iload	4
   368:	bipush	60
   370:	if_icmpeq	380
   373:	aload_0
   374:	ldc	#70; //String <
   376:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   379:	athrow
   380:	aload_0
   381:	invokevirtual	#72; //Method readChar:()C
   384:	istore	4
   386:	iload	4
   388:	bipush	47
   390:	if_icmpne	282
   393:	aload_0
   394:	iload	4
   396:	invokevirtual	#74; //Method unreadChar:(C)V
   399:	goto	431
   402:	aload_0
   403:	getfield	#5; //Field ignoreWhitespace:Z
   406:	ifeq	423
   409:	aload_1
   410:	aload_2
   411:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   414:	invokevirtual	#130; //Method java/lang/String.trim:()Ljava/lang/String;
   417:	invokevirtual	#131; //Method setContent:(Ljava/lang/String;)V
   420:	goto	431
   423:	aload_1
   424:	aload_2
   425:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   428:	invokevirtual	#131; //Method setContent:(Ljava/lang/String;)V
   431:	aload_0
   432:	invokevirtual	#72; //Method readChar:()C
   435:	istore	4
   437:	iload	4
   439:	bipush	47
   441:	if_icmpeq	451
   444:	aload_0
   445:	ldc	#132; //String /
   447:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   450:	athrow
   451:	aload_0
   452:	aload_0
   453:	invokevirtual	#69; //Method scanWhitespace:()C
   456:	invokevirtual	#74; //Method unreadChar:(C)V
   459:	aload_0
   460:	aload_3
   461:	invokevirtual	#112; //Method checkLiteral:(Ljava/lang/String;)Z
   464:	ifne	473
   467:	aload_0
   468:	aload_3
   469:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   472:	athrow
   473:	aload_0
   474:	invokevirtual	#69; //Method scanWhitespace:()C
   477:	bipush	62
   479:	if_icmpeq	489
   482:	aload_0
   483:	ldc	#113; //String >
   485:	invokevirtual	#71; //Method expectedInput:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   488:	athrow
   489:	return
  Exceptions: 
   throws java.io.IOException
protected void resolveEntity(java.lang.StringBuffer)   throws java.io.IOException;
  Code:
   Stack=2, Locals=6, Args_size=2
   0:	iconst_0
   1:	istore_2
   2:	new	#117; //class java/lang/StringBuffer
   5:	dup
   6:	invokespecial	#118; //Method java/lang/StringBuffer."<init>":()V
   9:	astore_3
   10:	goto	13
   13:	aload_0
   14:	invokevirtual	#72; //Method readChar:()C
   17:	istore_2
   18:	iload_2
   19:	bipush	59
   21:	if_icmpne	27
   24:	goto	36
   27:	aload_3
   28:	iload_2
   29:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   32:	pop
   33:	goto	13
   36:	aload_3
   37:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   40:	astore	4
   42:	aload	4
   44:	iconst_0
   45:	invokevirtual	#105; //Method java/lang/String.charAt:(I)C
   48:	bipush	35
   50:	if_icmpne	114
   53:	aload	4
   55:	iconst_1
   56:	invokevirtual	#105; //Method java/lang/String.charAt:(I)C
   59:	bipush	120
   61:	if_icmpne	80
   64:	aload	4
   66:	iconst_2
   67:	invokevirtual	#79; //Method java/lang/String.substring:(I)Ljava/lang/String;
   70:	bipush	16
   72:	invokestatic	#133; //Method java/lang/Integer.parseInt:(Ljava/lang/String;I)I
   75:	i2c
   76:	istore_2
   77:	goto	93
   80:	aload	4
   82:	iconst_1
   83:	invokevirtual	#79; //Method java/lang/String.substring:(I)Ljava/lang/String;
   86:	bipush	10
   88:	invokestatic	#133; //Method java/lang/Integer.parseInt:(Ljava/lang/String;I)I
   91:	i2c
   92:	istore_2
   93:	goto	105
   96:	astore	5
   98:	aload_0
   99:	aload	4
   101:	invokevirtual	#134; //Method unknownEntity:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   104:	athrow
   105:	aload_1
   106:	iload_2
   107:	invokevirtual	#107; //Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
   110:	pop
   111:	goto	147
   114:	aload_0
   115:	getfield	#14; //Field entities:Ljava/util/Hashtable;
   118:	aload	4
   120:	invokevirtual	#18; //Method java/util/Hashtable.get:(Ljava/lang/Object;)Ljava/lang/Object;
   123:	checkcast	#135; //class "[C"
   126:	astore	5
   128:	aload	5
   130:	ifnonnull	140
   133:	aload_0
   134:	aload	4
   136:	invokevirtual	#134; //Method unknownEntity:(Ljava/lang/String;)Lnanoxml/XMLParseException;
   139:	athrow
   140:	aload_1
   141:	aload	5
   143:	invokevirtual	#136; //Method java/lang/StringBuffer.append:([C)Ljava/lang/StringBuffer;
   146:	pop
   147:	return
  Exception table:
   from   to  target type
    53    93    96   Class java/lang/NumberFormatException

  Exceptions: 
   throws java.io.IOException
protected void unreadChar(char);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#66; //Field charReadTooMuch:C
   5:	return

protected nanoxml.XMLParseException invalidValueSet(java.lang.String);
  Code:
   Stack=5, Locals=3, Args_size=2
   0:	new	#117; //class java/lang/StringBuffer
   3:	dup
   4:	invokespecial	#118; //Method java/lang/StringBuffer."<init>":()V
   7:	ldc	#137; //String Invalid value set (entity name = \"
   9:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   12:	aload_1
   13:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   16:	ldc	#139; //String \")
   18:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   21:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   24:	astore_2
   25:	new	#140; //class nanoxml/XMLParseException
   28:	dup
   29:	aload_0
   30:	invokevirtual	#64; //Method getName:()Ljava/lang/String;
   33:	aload_0
   34:	getfield	#68; //Field parserLineNr:I
   37:	aload_2
   38:	invokespecial	#141; //Method nanoxml/XMLParseException."<init>":(Ljava/lang/String;ILjava/lang/String;)V
   41:	areturn

protected nanoxml.XMLParseException invalidValue(java.lang.String, java.lang.String);
  Code:
   Stack=5, Locals=4, Args_size=3
   0:	new	#117; //class java/lang/StringBuffer
   3:	dup
   4:	invokespecial	#118; //Method java/lang/StringBuffer."<init>":()V
   7:	ldc	#142; //String Attribute \"
   9:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   12:	aload_1
   13:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   16:	ldc	#143; //String \" does not contain a valid 
   18:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   21:	ldc	#144; //String value (\"
   23:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   26:	aload_2
   27:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   30:	ldc	#139; //String \")
   32:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   35:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   38:	astore_3
   39:	new	#140; //class nanoxml/XMLParseException
   42:	dup
   43:	aload_0
   44:	invokevirtual	#64; //Method getName:()Ljava/lang/String;
   47:	aload_0
   48:	getfield	#68; //Field parserLineNr:I
   51:	aload_3
   52:	invokespecial	#141; //Method nanoxml/XMLParseException."<init>":(Ljava/lang/String;ILjava/lang/String;)V
   55:	areturn

protected nanoxml.XMLParseException unexpectedEndOfData();
  Code:
   Stack=5, Locals=2, Args_size=1
   0:	ldc	#145; //String Unexpected end of data reached
   2:	astore_1
   3:	new	#140; //class nanoxml/XMLParseException
   6:	dup
   7:	aload_0
   8:	invokevirtual	#64; //Method getName:()Ljava/lang/String;
   11:	aload_0
   12:	getfield	#68; //Field parserLineNr:I
   15:	aload_1
   16:	invokespecial	#141; //Method nanoxml/XMLParseException."<init>":(Ljava/lang/String;ILjava/lang/String;)V
   19:	areturn

protected nanoxml.XMLParseException syntaxError(java.lang.String);
  Code:
   Stack=5, Locals=3, Args_size=2
   0:	new	#117; //class java/lang/StringBuffer
   3:	dup
   4:	invokespecial	#118; //Method java/lang/StringBuffer."<init>":()V
   7:	ldc	#146; //String Syntax error while parsing 
   9:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   12:	aload_1
   13:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   16:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   19:	astore_2
   20:	new	#140; //class nanoxml/XMLParseException
   23:	dup
   24:	aload_0
   25:	invokevirtual	#64; //Method getName:()Ljava/lang/String;
   28:	aload_0
   29:	getfield	#68; //Field parserLineNr:I
   32:	aload_2
   33:	invokespecial	#141; //Method nanoxml/XMLParseException."<init>":(Ljava/lang/String;ILjava/lang/String;)V
   36:	areturn

protected nanoxml.XMLParseException expectedInput(java.lang.String);
  Code:
   Stack=5, Locals=3, Args_size=2
   0:	new	#117; //class java/lang/StringBuffer
   3:	dup
   4:	invokespecial	#118; //Method java/lang/StringBuffer."<init>":()V
   7:	ldc	#147; //String Expected: 
   9:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   12:	aload_1
   13:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   16:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   19:	astore_2
   20:	new	#140; //class nanoxml/XMLParseException
   23:	dup
   24:	aload_0
   25:	invokevirtual	#64; //Method getName:()Ljava/lang/String;
   28:	aload_0
   29:	getfield	#68; //Field parserLineNr:I
   32:	aload_2
   33:	invokespecial	#141; //Method nanoxml/XMLParseException."<init>":(Ljava/lang/String;ILjava/lang/String;)V
   36:	areturn

protected nanoxml.XMLParseException unknownEntity(java.lang.String);
  Code:
   Stack=5, Locals=3, Args_size=2
   0:	new	#117; //class java/lang/StringBuffer
   3:	dup
   4:	invokespecial	#118; //Method java/lang/StringBuffer."<init>":()V
   7:	ldc	#148; //String Unknown or invalid entity: &
   9:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   12:	aload_1
   13:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   16:	ldc	#149; //String ;
   18:	invokevirtual	#138; //Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
   21:	invokevirtual	#120; //Method java/lang/StringBuffer.toString:()Ljava/lang/String;
   24:	astore_2
   25:	new	#140; //class nanoxml/XMLParseException
   28:	dup
   29:	aload_0
   30:	invokevirtual	#64; //Method getName:()Ljava/lang/String;
   33:	aload_0
   34:	getfield	#68; //Field parserLineNr:I
   37:	aload_2
   38:	invokespecial	#141; //Method nanoxml/XMLParseException."<init>":(Ljava/lang/String;ILjava/lang/String;)V
   41:	areturn

}

